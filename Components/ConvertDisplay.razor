
@inject ITransformer transformer

@using Transform
@using Models 
@using System.Linq

<div class="pt-4 has-text-centered">
    <div class="columns">
        <div class="column is-5 ">
            <div class="field has-addons">
                <p class="control">
                    <input class="input is-medium is-primary" type="number" step="any" placeholder="Area"
                           @bind-value="LeftInput"
                           @bind-value:event="oninput">
                </p>
                <p class="control">
                    <span class="select is-warning is-medium">
                        <select @bind="SelectedUnitLeft">
                            @foreach (var item in OptionUnits)
                            {
                                <option value="@item.Value">@item.Label</option>
                            }
                        </select>
                    </span>
                </p>
            </div>
        </div>
        <div class="column is-2">
            <span class="icon is-large">
                <i class="fas fa-3x fa-hand-point-right"></i>
            </span>
        </div>
        <div class="column is-5">
            <div class="field has-addons">
                <p class="control">
                    <input class="input is-medium is-primary" type="number" step="any" placeholder="Area"
                           @bind-value="RightInput" disabled>
                </p>
                <p class="control">
                    <span class="select is-warning is-medium">
                        <select @bind="SelectedUnitRight">
                            @foreach (var item in OptionUnits)
                            {
                                <option value="@item.Value">@item.Label</option>
                            }
                        </select>
                    </span>
                </p>
            </div>
        </div>
    </div>
    <div class="mt-4">
        <OneToManyUnits FromValue="@LeftInput" FromUnit="@SelectedUnitLeft" ToUnitNames="@OptionUnits.Select(x => x.Value).ToArray()" />
    </div>
</div>

@code {

    [Parameter]
    public DropdownOption[] OptionUnits { get; set; } = Array.Empty<DropdownOption>();

    [Parameter]
    public string UnitLeftDefaultValue { get; set; }

    [Parameter]
    public string UnitRightDefaultValue { get; set; }

    public double LeftInput { get; set; } = 1;

    private double _RightInput;
    public double RightInput
    {
        get => transformer.Transform(LeftInput, SelectedUnitLeft, SelectedUnitRight);
        set => _RightInput = value;
    }

    public string SelectedUnitLeft { get; set; }
    public string SelectedUnitRight { get; set; }

    protected override void OnParametersSet()
    {
        SelectedUnitLeft = UnitLeftDefaultValue;
        SelectedUnitRight = UnitRightDefaultValue;
    }
}
@using Transform
@using System.Linq

@inject ITransformer transformer

<MudGrid Class="d-flex align-center">
    <MudItem xs="4" sm="4" md="4" Style="text-align:right;">
        <NumericDisplay Value="@FromValue" Suffix="@shortForms[FromUnit]" />
    </MudItem>

    <MudItem xs="2" sm="2" md="2" Style="text-align:center;">
        <MudText Typo="Typo.h1" Color="Color.Primary">=</MudText>
    </MudItem>
    
    <MudItem xs="6" sm="6" md="6" Style="text-align:left;">
        @if (ToUnitNames == null || shortForms == null)
        {
            <p>Loading...</p>
        }
        else
        {
            var filteredToUnitNames = ToUnitNames.Except(new[] { FromUnit });
            @foreach (string toUnit in filteredToUnitNames)
            {
                <NumericDisplay Value="@transformer.Transform(FromValue, FromUnit, toUnit)" Suffix="@shortForms[toUnit]" />
            }
        }
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public double FromValue { get; set; }

    [Parameter]
    public string FromUnit { get; set; }

    [Parameter]
    public string[] ToUnitNames { get; set; } = Array.Empty<string>();

    Dictionary<string, string> shortForms;

    protected override void OnInitialized()
    {
        shortForms = transformer.GetUnitShortForms();
    }
}
